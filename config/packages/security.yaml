security:
    # https://symfony.com/doc/current/security/experimental_authenticators.html
    enable_authenticator_manager: false # Set to false to use Symfony Guard instead of the new security mecanism
    password_hashers:
        App\Entity\User:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            anonymous: true
            lazy: true
            provider: app_user_provider
            guard:
                authenticators:
#                    - App\Omdb\OmdbClient
                    - App\Security\LoginFormAuthenticator
                entry_point: App\Security\LoginFormAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route
            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/movie/genres$, roles: [ROLE_USER, ROLE_EDITOR] }
        - { path: ^/login, allow_if: 'is_anonymous() or is_granted("ROLE_ADMIN")'}
        - { path: ^/movie/latest, allow_if: 'is_granted("ROLE_SUPERADMIN") and is_granted("ROLE_ADMIN")'}
        # - { path: ^/profile, roles: ROLE_USER }

    role_hierarchy:
        ROLE_SUPERADMIN:
            - ROLE_ADMIN
